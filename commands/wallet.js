const path = require('path');
const fs = require('fs');
const {Writable} = require('stream');
const os = require('os');

const mkdirp = require('mkdirp');

const lightwallet = require('../eth-lightwallet');
const {makePromise, createKeystore, getUserInput} = require('../utils');

const _exportKeyStore = ks => ks.serialize();

module.exports = {
  command: 'wallet',
  describe: 'set up blockchain wallet',
  builder: {},
  handler: async () => {
    const mutableStdout = new Writable({
      write: function(chunk, encoding, callback) {
        if (!this.muted) { process.stdout.write(chunk, encoding); }
        callback();
      },
    });
    mutableStdout.muted = false;

    let seedPhrase = await getUserInput('seed phrase (BIP39 format, default: auto): ', {silent: true});
    if (seedPhrase) {
      if (!lightwallet.keystore.isSeedValid(seedPhrase)) {
        throw 'seed phrase is invalid; must be BIP39 format';
      }
    } else {
      seedPhrase = lightwallet.keystore.generateRandomSeed();
      console.log(seedPhrase);
      console.log('☝️ this is your autogenerated seed phrase; write it down');
    }

    const password = await getUserInput('password (used to encrypt seed phrase): ', {silent: true});
    const p3 = makePromise();
    if (password) {
      const ks = await createKeystore(seedPhrase, password);
      await mkdirp(os.homedir());
      fs.writeFile(path.join(os.homedir(), '.xrpackage-wallet'), _exportKeyStore(ks), err => {
        if (!err) {
          p3.accept();
        } else {
          p3.reject(err);
        }
      });
      console.log(`0x${ks.addresses[0]}`);
    } else {
      p3.reject(new Error('password is required'));
    }
    await p3;
  },
};
